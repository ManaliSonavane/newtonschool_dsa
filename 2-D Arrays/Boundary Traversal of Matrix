//To traverse i and j's minimum and maximum values through boundaries.
//0th row -> last col -> last row -> 1st col

import java.io.*; 
import java.util.*; 


class Main {
	public static void main (String[] args) {
	        Scanner s= new Scanner(System.in);
            int tc= s.nextInt();
			while(tc>0){
				int  n= s.nextInt();
				int m= s.nextInt();
				int[][] arr= new int[n][m];
				for(int i=0;i<n;i++){
					for(int j=0;j<m;j++){
						arr[i][j]= s.nextInt();
					}
				} 
				//if only one element
				if(n==1 && m==1){
                   System.out.print(arr[0][0]);
				}
				//only one row
				else if(n==1){
					for(int i=0;i<m;i++){
                        System.out.print(arr[0][i]+" ");
					}
				}
				//only one col
				else if(m==1){
					for(int i=0;i<n;i++){
                        System.out.print(arr[i][0]+" ");
					}
				}


				else{
					//more than one row n col
					//printing 1st row
					for(int i=0;i<m;i++){
                        System.out.print(arr[0][i]+" ");
					}
					//printing last col
					for(int i=1;i<n;i++){
                        System.out.print(arr[i][m-1]+" ");
					}
					//printing last row
					for(int i=m-2;i>=0;i--){
                        System.out.print(arr[n-1][i]+" ");
					}
					//printing 1st col
                    for(int i=n-2;i>=1;i--){
                        System.out.print(arr[i][0]+" ");
					}
				}
				 System.out.println();
				tc--;
			}
	}             
}
/*
Input:
4
4 4
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
3 4
12 11 10 9 8 7 6 5 4 3 2 1
1 4
1 2 3 4
4 1
1 2 3 4

Output:
1 2 3 4 8 12 16 15 14 13 9 5
12 11 10 9 5 1 2 3 4 8
1 2 3 4
1 2 3 4

Explanation:
Testcase1: The matrix is:
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
The boundary traversal is 1 2 3 4 8 12 16 15 14 13 9 5
Testcase 2: Boundary Traversal will be 12 11 10 9 5 1 2 3 4 8.
Testcase 3: Boundary Traversal will be 1 2 3 4.
Testcase 4: Boundary Traversal will be 1 2 3 4.
*/
